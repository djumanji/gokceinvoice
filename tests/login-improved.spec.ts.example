import { test, expect } from './fixtures/auth';
import { LoginPage } from './page-objects/LoginPage';

test.describe('Login Page - Improved', () => {
  let loginPage: LoginPage;

  test.beforeEach(async ({ page }) => {
    loginPage = new LoginPage(page);
    await loginPage.goto();
  });

  test('should display login form correctly', async () => {
    await expect(loginPage.page.getByText('Login to InvoiceHub')).toBeVisible();
    await expect(loginPage.page.getByRole('button', { name: 'Continue with Google' })).toBeVisible();
    await expect(loginPage.page.getByRole('button', { name: 'Continue with GitHub' })).toBeVisible();
    await expect(loginPage.page.getByRole('textbox', { name: /email/i })).toBeVisible();
    await expect(loginPage.page.getByRole('textbox', { name: /password/i })).toBeVisible();
    await expect(loginPage.page.getByRole('button', { name: 'Login' })).toBeVisible();
  });

  test('should show validation error for empty form', async ({ page }) => {
    await loginPage.page.getByRole('button', { name: 'Login' }).click();
    
    // Use web-first assertions that auto-wait
    const emailInput = loginPage.page.getByRole('textbox', { name: /email/i });
    await expect(emailInput).toBeFocused(); // Browser focuses on first invalid field
  });

  test('should show error for invalid credentials', async ({ page }) => {
    await loginPage.login('invalid@test.com', 'wrongpassword');
    
    // Wait for URL to not change (using web-first assertion)
    await expect(page).toHaveURL(/.*login/);
    
    // Better: Look for actual error message
    // await expect(page.getByText(/invalid credentials/i)).toBeVisible();
  });

  test('should navigate to register page', async ({ page }) => {
    await loginPage.navigateToRegister();
    await expect(page).toHaveURL(/.*register/);
  });

  test('should toggle theme', async ({ page }) => {
    // Store initial theme
    const initialTheme = await page.locator('html').getAttribute('data-theme');
    
    await loginPage.toggleTheme();
    
    // Check theme changed
    await expect(page.locator('html')).not.toHaveAttribute('data-theme', initialTheme || '');
  });

  test.describe('with authenticated user', () => {
    test.use({ authenticatedUser: undefined });

    test('should redirect authenticated user', async ({ page }) => {
      await page.goto('/login');
      // Should redirect to dashboard
      await expect(page).toHaveURL(/.*dashboard/);
    });
  });
});

